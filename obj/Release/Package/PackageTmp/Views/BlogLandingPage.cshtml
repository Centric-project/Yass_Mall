@using ContentModels = Umbraco.Web.PublishedModels;
@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.BlogLandingDocType>
@using Umbraco.Web.Mvc;
@{
    Layout = "master.cshtml";
    // set page title segment
    ViewBag.PageTitle = Model.BlogMainTitle;

    // set up pages
    int page = 0;
    int pageSize = 10;
    int.TryParse(Request.QueryString["p"], out page);

    // get items
    var blogsListing = GetBlogsListing(page, pageSize);

    // get page count
    int pageCount = (blogsListing.TotalCount % pageSize != 0) ? (blogsListing.TotalCount / pageSize) + 1 : blogsListing.TotalCount / pageSize; // get page count
}
<!--Start Main Banner-->
@{
    var newsBannerImg = Model.Value<IPublishedContent>("blogMainBanner");
    if (newsBannerImg != null)
    {
        <section class="main-banner">
            <div class="container-fluid custom-container-fluid">
                <div class="main-slide">
                    <div class="slide">
                        <img src="@newsBannerImg.Url()" alt="@Model.Value("blogMainTitle")" class="img-fluid" />
                    </div>
                </div>
            </div>
        </section>
    }
}
<!--End Main Banner-->
<!--Start Inner Page Wrapper-->
<div class="inner-section">
    <div class="container-fluid custom-container-fluid">
        <div class="row">
            <div class="col-md-12">
                <!--Start Breadcrumbs-->
                <nav aria-label="breadcrumb" class="breadcrumb-holder">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Umbraco.GetDictionaryValue("LogoHref")">@Umbraco.GetDictionaryValue("Home")</a></li>
                        <li class="breadcrumb-seprator"><i class="fas fa-angle-right"></i></li>
                        <li class="breadcrumb-item">
                            <a href="@Umbraco.GetDictionaryValue("MediaCenterHref")">@Umbraco.GetDictionaryValue("MediaCentre")</a>
                        </li>
                        <li class="breadcrumb-seprator"><i class="fas fa-angle-right"></i></li>
                        <li class="breadcrumb-item active" aria-current="page">@Model.Value("blogMainTitle")</li>
                    </ol>
                </nav>
                <!--End Breadcrumbs-->
                <!--Start Main Title-->
                <div class="clearfix title-holder">
                    <h1 class="title">@Model.Value("blogMainTitle")</h1>
                </div>
                <!--End Main Title-->
                <div class="content">
                    <div class="row">
                        @foreach (IPublishedContent blogsItem in blogsListing.Items)
                        {
                            var blogsThumbImg = blogsItem.Value<IPublishedContent>("thumbImg");
                            if (blogsThumbImg != null)
                            {
                                string blogsDet = Convert.ToString(blogsItem.Value("smallDetails"));
                                if (!string.IsNullOrEmpty(blogsDet))
                                {
                                    blogsDet = blogsDet.Substring(0, Math.Min(blogsDet.Length, 78));
                                    if (blogsDet.Length == 78)
                                    {
                                        blogsDet = blogsDet + "..";
                                    }
                                }
                                <div class="col-md-6 col-sm-12 blog-item blog-list">
                                    <div class="row">
                                        <div class="image col-lg-6 col-md-12">
                                            <a href="@blogsItem.Url()"><img src="@blogsThumbImg.Url()?width=319&height=200&mode=crop" alt="@blogsItem.Value("blogMainTitle")" /></a>
                                        </div>
                                        <div class="newsinfo date col-lg-6 col-md-12">
                                            <a href="@blogsItem.Url()"><h3>@blogsItem.Value("blogMainTitle")</h3></a>
                                            <p class="newsdate"><b>@String.Format("{0:dd MMM, yyyy}", blogsItem.Value("postingDate"))</b></p>
                                            <p class="newsdet">@blogsDet</p>
                                            <a href="@blogsItem.Url()" class="btn btn-primary gtm-track-more-event" name="@blogsItem.Name-ReadMore">@Umbraco.GetDictionaryValue("ReadMore")</a>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    @if (pageCount > 1)
                    {
                        <!-- pagination -->
                        <div class="row paging">
                            <div class="col-md-12">
                                <div class="sort-alpha-numb">
                                    <ul>
                                        @for (int p = 0; p < pageCount; p++)
                                        {
                                            <li class="@(p == page ? "active" : null) gtm-track-paging-event" name="@((p + 1) + "-Paging")"><a href="?p=@p">@(p + 1)</a></li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                    @*Total: @blogsListing.TotalCount, Pages: @pageCount*@
                </div>
            </div>
        </div>
    </div>
</div>
@functions {

    private dynamic GetBlogsListing(int page, int pageSize)
    {
        IEnumerable<IPublishedContent> items = null;
        int totalCount = 0;

        totalCount = Model.Children()//Model.Content.Site().FirstChild("blogLandingDocType").Children()
                .Where(x => x.IsVisible() && x.Value<IPublishedContent>("thumbImg") != null)
                .Count();

        items = Model.Children()//Model.Content.Site().FirstChild("blogLandingDocType").Children()
                .Where(x => x.IsVisible() && x.Value<IPublishedContent>("thumbImg") != null)
                .OrderByDescending(c => c.Value<DateTime?>("postingDate"))
                .Skip(page * pageSize)
                .Take(pageSize);

        return new
        {
            Items = items == null ? new List<IPublishedContent>() : items,
            TotalCount = totalCount
        };
    }
}
