@inherits Umbraco.Web.Mvc.UmbracoViewPage
@{
    Layout = "master.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" crossorigin="anonymous">
    
    <!-- Slick Slider CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/gh/kenwheeler/slick@1.8.1/slick/slick.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/gh/kenwheeler/slick@1.8.1/slick/slick-theme.css" />
    
    <!-- Your custom CSS -->
    <link rel="stylesheet" type="text/css" href="../assets/css/main.min.css" />
</head>
<body>
    <main class="foodDestination">
        <section class="sliderSect">
            <div class="container">
                <div class="mainFoodDestination">
                    <div class="fDslider">
                              @{
                                    var Slideritems = Model.Value<IEnumerable<IPublishedContent>>("sliderImage");
                                
                                    if (Slideritems != null && Slideritems.Any())
                                    {
                                        foreach (var slideritem in Slideritems)
                                        {
                                            <div>
                                                <img src="@slideritem.Url()" class="fullCoverImg" alt="@slideritem.Name" />
                                            </div>
                                        }
                                    }
                               }
                       
                    </div>
                </div>
            </div>
        </section>
        <section class="descriptionSect">
            <div class="container">
                <div class="descriptionArea">
                    @Html.Raw(Model.Value("fDDescription"))
                </div>
            </div>
        </section>
        <section class="foodCards">
            <div class="container">
                <div class="cardItem">
                    <div class="d-flex">
                        <div class="foodLogo">
                            @{
                                var cardOneLogo = Model.Value<IPublishedContent>("cardOneLogo");
                                if (cardOneLogo != null)
                                {
                                    <img src="@cardOneLogo.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                        <div class="foodText">
                            <div class="foodDesc">
                                @Html.Raw(Model.Value<string>("cardOneDescription"))
                            </div>
                        </div>
                        <div class="foodImage">
                            @{
                                var cardOneImage = Model.Value<IPublishedContent>("cardOneImage");
                                if (cardOneImage != null)
                                {
                                    <img src="@cardOneImage.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="cardItem">
                    <div class="d-flex">
                        <div class="foodLogo">
                            @{
                                var cardTwoLogo = Model.Value<IPublishedContent>("cardTwoLogo");
                                if (cardTwoLogo != null)
                                {
                                    <img src="@cardTwoLogo.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                        <div class="foodText">
                            <div class="foodDesc">
                                @Html.Raw(Model.Value<string>("cardTwoDescription"))
                            </div>
                        </div>
                        <div class="foodImage">
                            @{
                                var cardTwoImage = Model.Value<IPublishedContent>("cardTwoImage");
                                if (cardTwoImage != null)
                                {
                                    <img src="@cardTwoImage.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="cardItem">
                    <div class="d-flex">
                        <div class="foodLogo">
                            @{
                                var cardThreeLogo = Model.Value<IPublishedContent>("cardThreeLogo");
                                if (cardThreeLogo != null)
                                {
                                    <img src="@cardThreeLogo.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                        <div class="foodText">
                            <div class="foodDesc">
                                @Html.Raw(Model.Value<string>("cardThreeDescription"))
                            </div>
                        </div>
                        <div class="foodImage">
                            @{
                                var cardThreeImage = Model.Value<IPublishedContent>("cardThreeImage");
                                if (cardThreeImage != null)
                                {
                                    <img src="@cardThreeImage.Url()" class="fullCoverImg" />
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Optional JavaScript -->
    <!-- jQuery, Popper.js, and Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" crossorigin="anonymous"></script>
    
    <!-- Slick Slider JavaScript -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js"></script>
    
    <script>
        $(document).ready(function() {
            const $st = $('.pagination');
            const $slickEl = $('.fDslider');
            
            $slickEl.on('init reInit afterChange', function(event, slick, currentSlide, nextSlide) {
                const i = (currentSlide ? currentSlide : 0) + 1;
                $st.text(i + ' of ' + slick.slideCount);
            });
            
            $slickEl.slick({
                slidesToShow: 1,
                focusOnSelect: true,
                dots: true,
                infinite: true,
                responsive: [
                    {
                        breakpoint: 768,
                        settings: {
                            centerMode: false,
                            slidesToShow: 1
                        }
                    },
                    {
                        breakpoint: 480,
                        settings: {
                            centerMode: false,
                            slidesToShow: 1
                        }
                    }
                ]
            });
        });
    </script>
</body>
</html>
